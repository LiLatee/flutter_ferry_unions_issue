schema {
  query: RootQueryType
}

type ActivityData {
  description: String
}

type ActivityA implements Activity {
  body: String!
  id: ID!
  activity: ActivityData
}

interface Activity {
  id: ID!
}

union TimelineItemable = ActivityA | ActivityB

type TimelineItemConnection {
  count: Int!
  edges: [TimelineItemEdge!]!
}

type TimelineItemEdge {
  cursor: String
  node: TimelineItemable!
}

type Egg {
  id: ID!
}

type EggEdge {
  cursor: String
  node: Egg!
}

type ActivityB {
  body: String
  items(after: String, first: Int): ItemConnection!
  eggs(after: String, first: Int): EggConnection!
  sharedItem: SharedItem
  activity: ActivityUnion
}

union ActivityUnion = ActivityA
union SharedItem = ActivityA | ActivityB

type ItemConnection {
  count: Int!
  edges: [ItemEdge!]!
}

type ItemEdge {
  cursor: String
  node: Item!
}

type Item {
  activityB: ActivityB
  eggs(after: String, first: Int): EggConnection!
}

type EggConnection {
  count: Int!
  edges: [EggEdge!]!
}

type RootQueryType {
  timelineItems(after: String, first: Int): TimelineItemConnection!
}
